# https://taskfile.dev

version: "3"

vars:
  BUILD_DIR_BASE: '{{ joinPath .TASKFILE_DIR ".build" }}'
  BUILD_OS: '{{if eq .OS "windows"}}windows{{else}}{{if eq .OS "darwin"}}darwin{{else}}linux{{end}}{{end}}'
  BUILD_DIR: '{{ joinPath .BUILD_DIR_BASE .BUILD_OS }}'
  DEP_SOURCE_DIR: '{{ joinPath .BUILD_DIR "source" }}'
  ILOC: '{{ joinPath .BUILD_DIR "local" }}'
  VERSION:
    sh: git describe --tags HEAD

tasks:
  default:
    cmds:
      - task: build

  test:
    cmds:
      - cmd: 'echo "{{.ILOC}}"'
      - cmd: 'echo "{{.VERSION}}"'

  build:
    name: cmake-win64
    runs-on: windows-latest
    cmds:
      - cmd: scoop install nasm
      - task: task-checkout
      - task: uninstall-perl
      - task: build-and-install-zlib-ng
      - task: build-and-install-libpng
      - task: build-and-install-libjpeg
      - task: build-and-install-jbigkit
      - task: build-and-install-libtiff
      - task: build-and-install-leptonica
      - task: remove-not-needed-tools-before-building-tesseract
      - task: build-and-install-tesseract
      - task: display-tesseract-version-and-test-command-line-usage

  task-checkout:
    cmds:
      - cmd: git submodule update --recursive --checkout --init
      - cmd: git fetch --prune --unshallow --tags
        ignore_error: true
      - cmd: mkdir "{{ fromSlash .ILOC }}"
        ignore_error: true

  uninstall-perl:
    cmds:
      - cmd: choco uninstall strawberryperl
        ignore_error: true

  build-and-install-clone:
    vars:
      URI: '{{ default "" .URI }}'
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
    preconditions:
      - git --version
    status:
      - test -d "{{ .TARGET_DIR }}"
    cmds:
      - cmd: 'git clone {{ .GIT_ARGS }} --depth 1 "{{ .URI }}" "{{ fromSlash .TARGET_DIR }}"'
        if: '{{ .URI }} != "" && .TARGET_DIR != ""'

  build-and-install:
    vars:
      NAME: '{{ default "" .NAME }}'
      URI: '{{ default "" .URI }}'
      CONFIG: '{{ default "Release" .CONFIG }}'
      TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
      TARGET_BUILD_DIR: '{{ joinPath .BUILD_DIR .NAME }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
      CONFIGURE_ARGS: '{{ default "" .CONFIGURE_ARGS }}'
    cmds:
      - task: build-and-install-clone
        vars:
          TARGET_DIR: "{{ .TARGET_SOURCE_DIR }}"
          URI: "{{ .URI }}"
          GIT_ARGS: "{{ .GIT_ARGS }}"
      - cmd: >-
          git
          -C "{{ fromSlash .TARGET_SOURCE_DIR }}"
          pull --rebase --recurse-submodules --autostash
        ignore_error: true
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TARGET_SOURCE_DIR }}"
          -DCMAKE_PREFIX_PATH="{{ .ILOC }}"
          -DCMAKE_INSTALL_PREFIX="{{ .ILOC }}"
          {{ .CONFIGURE_ARGS }}
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install

  build-and-install-zlib-ng:
    cmds:
      - task: build-and-install
        vars:
          NAME: zlib-ng
          URI: https://github.com/zlib-ng/zlib-ng.git
          CONFIGURE_ARGS: >-
            -DBUILD_SHARED_LIBS=OFF
            -DZLIB_COMPAT=ON
            -DZLIB_ENABLE_TESTS=OFF
            -DINSTALL_UTILS=OFF

  build-and-install-libpng:
    vars:
      NAME: libpng
      FILENAME: lpng1643.zip
      OUTPUT_ARCHIVE_PATH: '{{ joinPath .ILOC .FILENAME }}'
      TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
      EXTRACTED_ARCHIVE_TARGET_PATH: '{{ joinPath .TARGET_SOURCE_DIR "lpng1643" }}'
      URI: 'https://download.sourceforge.net/{{ .NAME }}/{{ .FILENAME }}'
    cmds:
      - cmd: |
          mkdir -p "{{ fromSlash .ILOC }}"
          curl -sSL -o "{{ fromSlash .OUTPUT_ARCHIVE_PATH }}" "{{ .URI }}"
      - cmd: |
          rm -rf "{{ fromSlash .TARGET_SOURCE_DIR }}"
          mkdir -p "{{ fromSlash .TARGET_SOURCE_DIR }}"
          unzip -o -qq -d "{{ fromSlash .TARGET_SOURCE_DIR }}" "{{ fromSlash .OUTPUT_ARCHIVE_PATH }}"
          mv -f "{{ fromSlash .EXTRACTED_ARCHIVE_TARGET_PATH }}"/* "{{ fromSlash .TARGET_SOURCE_DIR }}"
          rm -rf "{{ fromSlash .EXTRACTED_ARCHIVE_TARGET_PATH }}"
      - task: build-and-install
        vars:
          NAME: '{{ .NAME }}'
          TARGET_SOURCE_DIR: '{{ .TARGET_SOURCE_DIR }}'
          CONFIGURE_ARGS: >-
            -DPNG_TESTS=OFF
            -DPNG_SHARED=OFF

  build-and-install-libjpeg:
    cmds:
      - task: build-and-install
        vars:
          NAME: libjpeg-turbo
          URI: https://github.com/libjpeg-turbo/libjpeg-turbo.git
          TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
          CONFIGURE_ARGS: >-
            -DWITH_TURBOJPEG=OFF
            -DENABLE_SHARED=OFF

  build-and-install-jbigkit:
    cmds:
      - task: build-and-install
        vars:
          NAME: jbigkit
          URI: https://github.com/zdenop/jbigkit.git
          TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
          CONFIGURE_ARGS: >-
            -DBUILD_PROGRAMS=OFF
            -DBUILD_TOOLS=OFF
            -DCMAKE_WARN_DEPRECATED=OFF

  build-and-install-libtiff:
    cmds:
      - task: build-and-install
        vars:
          NAME: libtiff
          URI: https://gitlab.com/libtiff/libtiff.git
          TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
          GIT_ARGS: -c advice.detachedHead=false -b "v4.6.0"
          CONFIGURE_ARGS: >-
            -Dtiff-tools=OFF
            -Dtiff-tests=OFF
            -Dtiff-contrib=OFF
            -Dtiff-docs=OFF

  build-and-install-leptonica:
    cmds:
      - task: build-and-install
        vars:
          NAME: leptonica
          URI: https://github.com/DanBloomberg/leptonica.git
          TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .NAME }}'
          CONFIGURE_ARGS: >-
            -DSW_BUILD=OFF
            -DBUILD_PROG=OFF
            -DBUILD_SHARED_LIBS=ON

  remove-not-needed-tools-before-building-tesseract:
    cmds:
      - cmd: rm -Rf {{ .ILOC }}/bin/*.exe

  build-and-install-tesseract:
    vars:
      NAME: tesseract
      CONFIG: '{{ default "Release" .CONFIG }}'
      TARGET_BUILD_DIR: '{{ joinPath .BUILD_DIR .NAME }}'
    cmds:
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TASKFILE_DIR }}"
          -DCMAKE_BUILD_TYPE="{{ .CONFIG }}"
          -DCMAKE_PREFIX_PATH="{{ .ILOC }}"
          -DCMAKE_INSTALL_PREFIX="{{ .ILOC }}"
          -DSW_BUILD=OFF
          -DBUILD_SHARED_LIBS=ON
          -DENABLE_LTO=ON
          -DBUILD_TRAINING_TOOLS=OFF
          -DFAST_FLOAT=ON
          -DGRAPHICS_DISABLED=ON
          -DOPENMP_BUILD=OFF
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install

  display-tesseract-version-and-test-command-line-usage:
    cmds:
      - cmd: |
          curl -L https://github.com/tesseract-ocr/tessdata/raw/main/eng.traineddata --output {{ .ILOC }}/share/tessdata/eng.traineddata
          curl -L https://github.com/tesseract-ocr/tessdata/raw/main/osd.traineddata --output {{ .ILOC }}/share/tessdata/osd.traineddata
          echo "Setting TESSDATA_PREFIX..."
          set TESSDATA_PREFIX={{ .ILOC }}/share/tessdata
          echo "Setting PATH..."
          set PATH={{ .ILOC }}/bin;%PATH%
          echo "Checking installed tesseract version..."
          tesseract -v
          echo "Checking installed langs"
          tesseract --list-langs
          echo "Checking OCR process"
          tesseract test/testing/phototest.tif -

# https://taskfile.dev

version: "3"

vars:
  VERSION:
    sh: git describe --tags HEAD || echo "0.0.1.unknown"

  BUILD_DIR_BASE: '{{ joinPath .TASKFILE_DIR ".build" }}'
  BUILD_OS: '{{if eq .OS "windows"}}windows{{else}}{{if eq .OS "darwin"}}darwin{{else}}linux{{end}}{{end}}'
  BUILD_DIR: '{{ joinPath .BUILD_DIR_BASE .BUILD_OS }}'

  DEP_SOURCE_DIR: '{{ joinPath .BUILD_DIR "source" }}'
  DEP_BUILD_DIR: '{{ joinPath .BUILD_DIR "out" }}'
  DEP_ARCHIVE_DIR: '{{ joinPath .BUILD_DIR "archives" }}'
  DEP_TEMP_DIR: '{{ joinPath .BUILD_DIR "tmp" }}'

  ILOC: '{{ joinPath .BUILD_DIR "install" }}'

  # https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
  # Semicolon-separated list of directories specifying installation prefixes to be searched by the find_package(),
  # find_program(), find_library(), find_file(), and find_path() commands. Each command will add appropriate
  # subdirectories (like bin, lib, or include) as specified in its own documentation.
  PREFIX_PATH: '{{ .ILOC }};{{ .TASKFILE_DIR }}/external/vcpkg;{{ .TASKFILE_DIR }}'

  TESSDATA_PREFIX: '{{ .ILOC }}/share/tessdata'

tasks:
  default:
    cmds:
      - task: tesseract

  init:
    internal: true
    deps: [git-init, dependency-nasm, remove-strawberry-perl]
    cmds:
      - task: build-dependencies

  build-dependencies:
    internal: true
    deps: [
      dependency-zlib-ng, dependency-libpng,
      dependency-libjpeg, dependency-jbigkit,
      dependency-libtiff, dependency-leptonica
    ]

  remove-unused-tool-binaries:
    cmds:
      - cmd: rm -Rf "{{ .ILOC }}/bin/"*.exe

  build:
    deps: [init]
    cmds:
      - task: remove-unused-tool-binaries
      - task: tesseract-build

  tesseract-build:
    cmds:
      - task: cmake-build
        vars:
          TARGET_NAME: tesseract
          TARGET_SOURCE_DIR: "{{ fromSlash .TASKFILE_DIR }}"
          CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=ON
            -DBUILD_TRAINING_TOOLS=OFF
            -DENABLE_LTO=ON
            -DFAST_FLOAT=ON
            -DGRAPHICS_DISABLED=ON
            -DOPENMP_BUILD=OFF
            -DSW_BUILD=OFF

  tesseract:
    deps: [tesseract-build, tesseract-data]
    vars:
      CLI_ARGS: '{{ default "--version" .CLI_ARGS }}'
      TESSERACT_BIN_DIR: '{{ joinPath .ILOC "tesseract" "bin" }}'
      TESSERACT_LIB_DIR: '{{ joinPath .ILOC "tesseract" "lib" }}'
      TESSERACT_RAW_PATHS: |
        {{ .TESSERACT_BIN_DIR }}
        {{ .TESSERACT_LIB_DIR }}
        {{ joinPath .ILOC "leptonica" "lib" }}
        {{ joinPath .ILOC "libtiff" "lib" }}
      TESSERACT_PATHS: '{{ splitLines .TESSERACT_RAW_PATHS | uniq | compact | sortAlpha | join ":" }}'
    env:
      CLI_ARGS: '{{ .CLI_ARGS }}'
      TESSERACT_BIN_DIR: '{{ fromSlash .TESSERACT_BIN_DIR }}'
      TESSERACT_LIB_DIR: '{{ fromSlash .TESSERACT_LIB_DIR }}'
      TESSERACT_PATHS: '{{ .TESSERACT_PATHS }}'
    silent: true
    cmd: |
      export PATH="$TESSERACT_PATHS:$PATH"
      export LD_LIBRARY_PATH="$TESSERACT_PATHS:$LD_LIBRARY_PATH"
      tesseract $CLI_ARGS

  tesseract-data:
    cmds:
      - for: ['eng.traineddata', 'osd.traineddata']
        task: get-trained-data
        vars:
          TARGET_DIR: '{{ .TESSDATA_PREFIX }}'
          URI: 'https://github.com/tesseract-ocr/tessdata/raw/main/{{ .ITEM }}'

  test:
    cmds:
      - task: tesseract
        vars: { CLI_ARGS: -v }
      - task: tesseract
        vars: { CLI_ARGS: --list-langs }
      - task: tesseract
        vars: { CLI_ARGS: test/testing/phototest.tif - }

  dependency-nasm:
    platforms: [windows]
    status:
      - nasm --version
    cmds:
      - cmd: scoop install nasm
        platforms: [windows]

  get-trained-data:
    vars:
      URI: '{{ default "" .URI }}'
      TARGET_DIR: '{{ default .TASKFILE_DIR .TARGET_DIR }}'
      TARGET_NAME: '{{ .URI | splitList "/" | last }}'
      TARGET: '{{ joinPath .TARGET_DIR .TARGET_NAME }}'
    desc: "Download trained data. {{ .TARGET_NAME }}"
    status:
      - test -f "{{ .TARGET }}"
    cmds:
      - cmd: |
          mkdir -p "{{ .TARGET | dir | fromSlash }}"
      - cmd: |
          curl -L "{{ .URI }}" --output "{{ .TARGET | fromSlash }}"

  git-init:
    internal: true
    status:
      - test -d "{{ .TASKFILE_DIR }}/test/.gitignore"
    cmds:
      - cmd: git submodule update --recursive --checkout --init

  remove-strawberry-perl:
    platforms: [windows]
    status:
      - choco --version
      - choco list --local-only | grep -q strawberryperl
    cmds:
      - cmd: choco uninstall strawberryperl
        ignore_error: true

  git-clone:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      URI: '{{ default "" .URI }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
    preconditions:
      - git --version
    status:
      - test -z "{{ .TARGET_DIR }}"
    cmds:
      - cmd: |
          if rmdir "{{ fromSlash .TARGET_DIR }}" 2> /dev/null; then
            echo "Removed empty target directory: '{{ fromSlash .TARGET_DIR }}'"
          fi
      - cmd: |
          if [ -n "{{ .URI }}" ] && [ ! -d "{{ fromSlash .TARGET_DIR }}" ]; then
            git clone {{ .GIT_ARGS }} --depth 1 "{{ .URI }}" "{{ fromSlash .TARGET_DIR }}"
          else
            echo "Target directory already checked out: '{{ fromSlash .TARGET_DIR }}'"
          fi
      - task: git-pull
        vars: { TARGET_DIR: "{{ .TARGET_DIR }}" }

  git-pull:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
    preconditions:
      - git --version
    status:
      - test ! -d "{{ .TARGET_DIR }}"
    dir: '{{ .TARGET_DIR }}'
    cmd: git pull --rebase --autostash || true

  clean:
    cmds:
      - cmd: git add .
      - cmd: git clean -xfd
      - cmd: rm -rf "{{ fromSlash .BUILD_DIR_BASE }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "zlib-ng" | fromSlash }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "libjpeg-turbo" | fromSlash }}"

  cmake-build:
    vars:
      URI: '{{ default "" .URI }}'
      CONFIG: '{{ default "Release" .CONFIG }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
      CONFIGURE_ARGS: '{{ default "" .CONFIGURE_ARGS }}'

      INPUT_TARGET_SOURCE_DIR: '{{ default .TASKFILE_DIR .TARGET_SOURCE_DIR }}'
      INPUT_TARGET_SOURCE_DIR_NAME: '{{ .INPUT_TARGET_SOURCE_DIR | splitList "/" | last }}'

      GIT_REPO: '{{ .URI | splitList "/" | reverse | first }}'
      USERNAME: '{{ .URI | splitList "/" | reverse | rest | first }}'
      REPO: '{{ .GIT_REPO | splitList "." | first }}'

      DEFAULT_TARGET_NAME: '{{ coalesce .REPO .INPUT_TARGET_SOURCE_DIR_NAME }}'

      TARGET_NAME: '{{ default .DEFAULT_TARGET_NAME .TARGET_NAME }}'

      TARGET_SOURCE_DEFAULT_DIR: '{{ joinPath .DEP_SOURCE_DIR .TARGET_NAME }}'

      TARGET_SOURCE_DIR: '{{ default .TARGET_SOURCE_DEFAULT_DIR .TARGET_SOURCE_DIR }}'
      TARGET_BUILD_DIR: '{{ joinPath .DEP_BUILD_DIR .TARGET_NAME }}'
      TARGET_PREFIX_PATH: '{{ .PREFIX_PATH }};{{ .TARGET_SOURCE_DIR }};{{ .TARGET_BUILD_DIR }}'

      INSTALL_PREFIX: '{{ joinPath .ILOC .TARGET_NAME }}'

      TARGET_OUTPUT_TEST_FILE: 'lib/{{ .TARGET_NAME }}.a'
      TARGET_OUTPUT_TEST_PATH: '{{ joinPath .INSTALL_PREFIX .TARGET_OUTPUT_TEST_FILE }}'
    status:
      - test -d "{{ .TARGET_BUILD_DIR }}"
      - test -d "{{ .TARGET_SOURCE_DIR }}"
      - test -d "{{ .INSTALL_PREFIX }}"
      - test -f "{{ .TARGET_OUTPUT_TEST_PATH }}"
    dir: '{{ .TARGET_SOURCE_DIR }}'
    cmds:
      - task: git-clone
        vars: { TARGET_DIR: "{{ .TARGET_SOURCE_DIR }}", URI: "{{ .URI }}", GIT_ARGS: "{{ .GIT_ARGS }}" }
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TARGET_SOURCE_DIR }}"
          -DCMAKE_PREFIX_PATH="{{ fromSlash .TARGET_PREFIX_PATH }}"
          -DCMAKE_INSTALL_PREFIX="{{ fromSlash .INSTALL_PREFIX }}"
          -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO="STDOUT"
          {{ .CONFIGURE_ARGS }}
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install
          --verbose
          -j {{ if eq .OS "windows" }}$NUMBER_OF_PROCESSORS{{ else }}$(nproc){{ end }}

  dependency-zlib-ng:
    cmds:
      - task: cmake-build
        vars:
          URI: "https://github.com/zlib-ng/zlib-ng.git"
          CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=OFF
            -DZLIB_COMPAT=ON
            -DZLIB_ENABLE_TESTS=OFF
            -DINSTALL_UTILS=OFF

  normalize-file-ending:
    vars:
      TARGET_FILE_PATH: '{{ default "" .TARGET_FILE_PATH }}'
    preconditions:
      - awk --version
    cmds:
      - awk '{ sub("\r$", ""); print }' "{{ fromSlash .TARGET_FILE_PATH }}" > "{{ fromSlash .TARGET_FILE_PATH }}"

  dependency-libpng:
    vars:
      URI_ZIP: 'https://download.sourceforge.net/libpng/lpng1643.zip'
      URI_TAR_XZ: 'https://download.sourceforge.net/libpng/libpng-1.6.27.tar.xz'
      URI: '{{ if eq .BUILD_OS "windows" }}{{ .URI_ZIP }}{{ else }}{{ .URI_TAR_XZ }}{{ end }}'
      TARGET_NAME: '{{ .URI | splitList "/" | reverse | rest | first }}'  # libpng
      TMP_FILENAME: '{{ .URI | splitList "/" | last }}'  # lpng1643.zip
      TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .TARGET_NAME }}'
    env:
      OUTPUT_UNZIP_DIR: '{{ joinPath .DEP_TEMP_DIR .TARGET_NAME | fromSlash }}'
      TARGET_EXTENSION: '{{ .TMP_FILENAME | splitList "." | last }}'
      TARGET_SOURCE_DIR: '{{ fromSlash .TARGET_SOURCE_DIR }}'
      OUTPUT_ARCHIVE_FILE_PATH: '{{ joinPath .DEP_ARCHIVE_DIR .TMP_FILENAME }}'
      OUTPUT_ARCHIVE_DIR: '{{ joinPath .DEP_ARCHIVE_DIR .TMP_FILENAME | dir | fromSlash }}'
      URI: '{{ .URI }}'
    silent: true
    cmds:
      - cmd: |
          if [ ! -e "$OUTPUT_ARCHIVE_FILE_PATH" ]; then
            echo "Downloading archive: '$URI'"
            mkdir -p "${OUTPUT_ARCHIVE_DIR}"
            curl -sSL -o "${OUTPUT_ARCHIVE_FILE_PATH}" "${URI}"
          fi
      - cmd: |
          mkdir -p "$TARGET_SOURCE_DIR" "$OUTPUT_UNZIP_DIR"
          if [ "$TARGET_EXTENSION" == "zip" ]; then
            unzip -o -qq -d "$OUTPUT_UNZIP_DIR" "$OUTPUT_ARCHIVE_FILE_PATH"
          else
            tar -xf "$OUTPUT_ARCHIVE_FILE_PATH" -C "$OUTPUT_UNZIP_DIR"
          fi
      - cmd: |
          mkdir -p "$TARGET_SOURCE_DIR"
          extracted_folder_name="$(ls "$OUTPUT_UNZIP_DIR" | head -1)"
          cp -Ru "$OUTPUT_UNZIP_DIR/$extracted_folder_name"/* "$TARGET_SOURCE_DIR"
          echo "Copied updated source files from archive to target: '$TARGET_SOURCE_DIR'"
      - task: cmake-build
        vars:
          TARGET_NAME: '{{ .TARGET_NAME }}'
          TARGET_SOURCE_DIR: '{{ .TARGET_SOURCE_DIR }}'
          CONFIGURE_ARGS: >-
            -DPNG_TESTS=OFF
            -DPNG_SHARED=OFF

  dependency-libjpeg:
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/libjpeg-turbo/libjpeg-turbo.git
          CONFIGURE_ARGS: >-
            -DWITH_TURBOJPEG=OFF
            -DENABLE_SHARED=OFF

  dependency-jbigkit:
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/zdenop/jbigkit.git
          CONFIGURE_ARGS: >-
            -DBUILD_PROGRAMS=OFF
            -DBUILD_TOOLS=OFF
            -DCMAKE_WARN_DEPRECATED=OFF

  dependency-libtiff:
    cmds:
      - task: cmake-build
        vars:
          URI: https://gitlab.com/libtiff/libtiff.git
          GIT_ARGS: -c advice.detachedHead=false -b "v4.6.0"
          CONFIGURE_ARGS: >-
            -Dtiff-tools=OFF
            -Dtiff-tests=OFF
            -Dtiff-contrib=OFF
            -Dtiff-docs=OFF

  dependency-leptonica:
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/DanBloomberg/leptonica.git
          CONFIGURE_ARGS: >-
            -DSW_BUILD=OFF
            -DBUILD_PROG=OFF
            -DBUILD_SHARED_LIBS=ON

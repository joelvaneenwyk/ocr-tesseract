# https://taskfile.dev

version: "3"

vars:
  GIT_VERSION:
    sh: git describe --tags HEAD || true

  VERSION: '{{ .GIT_VERSION | default "0.0.1.unknown" | splitLines | first }}'
  BUILD_OS: '{{if eq OS "windows"}}windows{{else}}{{if eq OS "darwin"}}macos{{else}}linux{{end}}{{end}}'

  BUILD_DIR_NAME: '{{ .BUILD_DIR_NAME | default ".build" }}'
  BUILD_DIR_ROOT: '{{ joinPath .ROOT_DIR .BUILD_DIR_NAME }}'
  BUILD_DIR: '{{ joinPath .BUILD_DIR_ROOT .BUILD_OS }}'

  DEP_SOURCE_DIR: '{{ joinPath .BUILD_DIR "source" }}'
  DEP_BUILD_DIR: '{{ joinPath .BUILD_DIR "out" }}'
  DEP_ARCHIVE_DIR: '{{ joinPath .BUILD_DIR "archives" }}'
  DEP_TEMP_DIR: '{{ joinPath .BUILD_DIR "tmp" }}'

  ILOC: '{{ joinPath .BUILD_DIR "install" }}'

  TESSDATA_PREFIX: '{{ .ILOC }}/share/tessdata'

tasks:
  default:
    cmds:
      - cmd: echo "Building Tesseract OCR 'v{{ .VERSION }}'"
      - task: tesseract

  rebuild:
    cmds:
      - task: clean
      - task: build

  clean:
    cmds:
      - cmd: git add .
      - cmd: git submodule deinit --all -f
      - cmd: git submodule update --init --recursive --checkout
      - cmd: cmd.exe /D /C rmdir /q /s -rf "{{ fromSlash .BUILD_DIR_ROOT }}"
        platforms: [windows]
      - cmd: rm -rf "{{ fromSlash .BUILD_DIR }}"
        platforms: [linux, darwin]
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "zlib-ng" | fromSlash }}"
        platforms: [linux, darwin]
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "libjpeg-turbo" | fromSlash }}"
        platforms: [linux, darwin]
      - cmd: git clean -xfd

  vcpkg-bootstrap:
    vars:
      VCPKG_BOOTSTRAP: '{{ joinPath .ROOT_DIR "external/vcpkg/bootstrap-vcpkg.bat" }}'
      VCPKG: '{{ joinPath .ROOT_DIR "external/vcpkg/vcpkg" }}'
      VCPKG_CMAKE: '{{ joinPath .ROOT_DIR "external/vcpkg/scripts/buildsystems/vcpkg.cmake" }}'
    env:
      VCPKG_ROOT: '{{ joinPath .ROOT_DIR "external/vcpkg" | fromSlash }}'
    cmds:
      - cmd: git submodule update --init --recursive --checkout
      - cmd: cmd.exe /D /C call "{{ fromSlash .VCPKG_BOOTSTRAP }}"
      - cmd: cmd.exe /D /C call "{{ fromSlash .VCPKG }}" integrate install

  vcpkg:
    cmds:
      - cmd: external/vcpkg/vcpkg.exe --vcpkg-root "{{ joinPath .TASKFILE_DIR "external" "vcpkg" }}" {{ .CLI_ARGS }}

  build-vcpkg:
    vars:
      VCPKG_BOOTSTRAP: '{{ joinPath .ROOT_DIR "external/vcpkg/bootstrap-vcpkg.bat" }}'
      VCPKG: '{{ joinPath .ROOT_DIR "external/vcpkg/vcpkg" }}'
      VCPKG_CMAKE: '{{ joinPath .ROOT_DIR "external/vcpkg/scripts/buildsystems/vcpkg.cmake" }}'
    cmds:
      - task: vcpkg-bootstrap
      - cmd: >-
          cmake
          --preset "windows-x64"
          -DCMAKE_BUILD_TYPE=RelD
          -DSW_BUILD=OFF
          -DOPENMP_BUILD=OFF
          -DBUILD_TRAINING_TOOLS=OFF
      - cmd: |
          cmake --build --preset "windows-x64" --target install

  update:
    preconditions:
      - git --version
      - test -d "{{ .TASKFILE_DIR }}/.git"
    cmds:
      - cmd: git -C "{{ .TASKFILE_DIR }}" add .
      - cmd: git -C "{{ .TASKFILE_DIR }}" fetch
      - cmd: git -C "{{ .TASKFILE_DIR }}" pull --rebase --autostash

  #
  # Tesseract
  #

  tesseract:
    deps: [tesseract-build, tesseract-data]
    vars:
      PATH_SEPARATOR: '{{ if eq OS "windows" }};{{ else }}:{{ end }}'
      TESSERACT_CLI_ARGS: '{{ default "--version" .CLI_ARGS }}'
      TESSERACT_PATH_ARRAY: |
        {{ joinPath .ILOC "bin" }}
        {{ joinPath .ILOC "tesseract" "bin" }}
        {{ joinPath .ILOC "tesseract" "lib" }}
        {{ joinPath .ILOC "leptonica" "lib" }}
        {{ joinPath .ILOC "libtiff" "lib" }}
        {{ joinPath .TESSDATA_PREFIX }}
      TESSERACT_PATHS: '{{ splitLines .TESSERACT_PATH_ARRAY | uniq | compact | sortAlpha | join .PATH_SEPARATOR }}'
    silent: true
    cmd: |
      set -eax
      PATH="{{ .TESSERACT_PATHS }}{{ .PATH_SEPARATOR }}${PATH:-}"
      LD_LIBRARY_PATH="{{ .TESSERACT_PATHS }}{{ .PATH_SEPARATOR }}${LD_LIBRARY_PATH:-}"
      TESSDATA_PREFIX="{{ fromSlash .TESSDATA_PREFIX }}"
      echo "##[cmd] tesseract {{ .TESSERACT_CLI_ARGS }}"
      cd "{{ joinPath .ILOC "bin" }}" || true
      tesseract {{ .TESSERACT_CLI_ARGS }}

  tesseract-data:
    cmds:
      - for: ['eng.traineddata', 'osd.traineddata']
        task: get-file
        vars: { GET_FILE_URI: 'https://github.com/tesseract-ocr/tessdata/raw/main/{{ .ITEM }}' }

  dependency-linux-os:
    platforms: [linux]
    preconditions:
      - sudo --version
      - apt-get --version
    status:
      - sudo --version
      - cmake --version
      - ninja --version
    cmds:
      - cmd: >-
          sudo -n apt-get update -y
        ignore_error: true
      - cmd: >-
          sudo -n apt-get install -y --no-install-recommends
          autoconf libleptonica-dev
          libarchive-dev libcurl4-openssl-dev
          libpango1.0-dev
          cabextract
          ninja-build
        ignore_error: true

  tesseract-dependencies:
    deps: [git-submodule-update]
    # We are intentionally executing these tasks serially to avoid errors that occur
    # when installing multiple packages at the same time.
    cmds:
      - task: dependency-linux-os
      - task: dependency-nasm
      - task: dependency-unzip
      # We are intentionally executing these tasks serially to avoid errors that occur
      # when installing multiple packages at the same time.
      - task: dependency-nasm
      - task: dependency-unzip
      # Remove conflicting libraries
      - task: remove-strawberry-perl
      # Libraries built in same order as ".github/workflows/cmake-win64.yml"
      - task: dependency-zlib-ng
      - task: dependency-libpng
      - task: dependency-libjpeg
      - task: dependency-jbigkit
      - task: dependency-libtiff
      # Has dependency on 'dependency-libtiff'
      - task: dependency-leptonica

  tesseract-build:
    deps: [tesseract-dependencies]
    aliases: [build, b]
    cmds:
      # Remove any locally installed tools that aren't needed
      # before we build tesseract.
      - task: remove-unused-tool-binaries
      - task: cmake-build
        vars:
          CM_TARGET_NAME_OVERRIDE: tesseract
          CM_SOURCE_DIR:
            ref: ".TASKFILE_DIR"
          CM_CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=ON
            -DBUILD_TRAINING_TOOLS=OFF
            -DENABLE_LTO=ON
            -DFAST_FLOAT=ON
            -DGRAPHICS_DISABLED=ON
            -DOPENMP_BUILD=OFF
            -DSW_BUILD=OFF

  #
  # Initialization
  #

  remove-unused-tool-binaries:
    internal: true
    status:
      - test ! -d "{{ .ILOC }}/bin/"
    cmds:
      - cmd: rm -Rf "{{ .ILOC }}/bin/"*.exe
        platforms: [linux, darwin]

  #
  # Utilities
  #

  make-dir:
    required: [MAKE_DIR_TARGET_DIR]
    vars:
      INT_MAKE_DIR_TARGET_PATH: '{{ coalesce .MAKE_DIR_TARGET_DIR .CLI_ARGS "" | trimAll "''" }}'
    preconditions:
      - test -n "{{ .INT_MAKE_DIR_TARGET_PATH }}"
    cmds:
      - cmd: |
          cmd.exe /D /E:ON /C if not exist "{{ fromSlash .INT_MAKE_DIR_TARGET_PATH }}" mkdir "{{ fromSlash .INT_MAKE_DIR_TARGET_PATH }}"
        platforms: [windows]
      - cmd: 'mkdir -p {{ .INT_MAKE_DIR_TARGET_PATH }}'
        platforms: [darwin, linux]

  make-dir-test:
    vars:
      TEST_DIR: '{{ joinPath .BUILD_DIR "test" }}'
    cmds:
      - cmd: cmd.exe /D /C if exist "{{ fromSlash .BUILD_DIR_ROOT }}" rmdir /q /s "{{ fromSlash .BUILD_DIR_ROOT }}"
      - cmd: |
          if [ -d "{{ .TEST_DIR }}" ]; then
            echo "Failed to delete '{{ .TEST_DIR }}' directory."
            exit 55
          else
            echo "Removed '{{ .TEST_DIR }}' directory."
          fi
      - task: make-dir
        vars: { MAKE_DIR_TARGET_DIR: '{{ .TEST_DIR }}' }
      - cmd: |
          if [ ! -d "{{ .TEST_DIR }}" ]; then
            echo "Failed to create '{{ .TEST_DIR }}' directory."
            exit 55
          else
            echo "Created '{{ .TEST_DIR }}' directory."
          fi
      - cmd: cmd.exe /D /C if exist "{{ fromSlash .BUILD_DIR_ROOT }}" rmdir /q /s "{{ fromSlash .BUILD_DIR_ROOT }}"

  test:
    cmds:
      - task: tesseract
        vars: { TESSERACT_CLI_ARGS: -v }
      - task: tesseract
        vars: { TESSERACT_CLI_ARGS: --list-langs }
      - task: tesseract
        vars: { TESSERACT_CLI_ARGS: test/testing/phototest.tif - }

  remove-strawberry-perl:
    platforms: [windows]
    vars:
      INSTALLED_PERL_PACKAGES:
        sh: choco list --yes --fail-on-error-output --by-id-only strawberryperl
      NO_PACKAGES_FOUND: '{{ contains "0 packages installed" .INSTALLED_PERL_PACKAGES }}'
    status:
      - '{{ .NO_PACKAGES_FOUND }}'
      - choco --version
    cmd: >-
      choco uninstall
      --ignoreAutoUninstallerFailure
      --yes
      strawberryperl

  remove-empty-directory:
    vars:
      TARGET_DIR_TO_REMOVE_DEFAULT: '{{ joinPath .DEP_BUILD_DIR "INVALID_BROKEN_PATH" }}'
      TARGET_DIR_TO_REMOVE: '{{ .TARGET_DIR_PATH | default .TARGET_DIR_TO_REMOVE_DEFAULT }}'
    cmds:
      - cmd: cmd.exe /D /C if exist "{{ fromSlash .TARGET_DIR_TO_REMOVE }}" rmdir "{{ fromSlash .TARGET_DIR_TO_REMOVE }}"
        platforms: [windows]
        ignore_error: true
      - cmd: rmdir "{{ toSlash .TARGET_DIR_TO_REMOVE }}"
        platforms: [linux, darwin]
        ignore_error: true

  git-submodule-update:
    internal: true
    status:
      - test -d "{{ .TASKFILE_DIR }}/test/.gitignore"
    cmds:
      - cmd: git submodule update --recursive --checkout --init

  git-clone:
    required: [GTC_TARGET_DIR, GTC_URI]
    vars:
      GTC_TARGET_DIR: '{{ default "" .GTC_TARGET_DIR }}'
      GTC_URI: '{{ default "" .GTC_URI }}'
      GTC_GIT_ARGS: '{{ default .CLI_ARGS .GTC_GIT_ARGS }}'
      GTC_GIT_BRANCH: '{{ default "" .GTC_GIT_BRANCH }}'

      GTC_GEN_BRANCH_ARGS: -b "{{.GTC_GIT_BRANCH}}"
      GTC_GEN_CLONE_ARGS: >-
        --depth 1
        {{eq .GTC_GIT_BRANCH "" | ternary "" .GTC_GEN_BRANCH_ARGS}}
        {{.GTC_GIT_ARGS}}
    preconditions:
      - git --version
    cmds:
      - cmd: echo "Cloning '{{.GTC_GEN_CLONE_ARGS}}'"
      - task: remove-empty-directory
        vars: { TARGET_DIR_PATH: '{{ .GTC_TARGET_DIR }}' }
      - cmd: |
          if [ -n "{{ .GTC_URI }}" ] && [ ! -d "{{ toSlash .GTC_TARGET_DIR }}" ]; then
            git clone {{ .GTC_GEN_CLONE_ARGS }} \
              "{{ .GTC_URI }}" \
              "{{ fromSlash .GTC_TARGET_DIR }}"
          else
            echo "Target directory already checked out: '{{ fromSlash .GTC_TARGET_DIR }}'"
          fi

  git-pull:
    vars:
      GP_INPUT_TARGET_DIR: '{{ default "" .GP_TARGET_DIR }}'
      GP_TARGET_DIR: '{{ coalesce .GP_TARGET_DIR .TASKFILE_DIR }}'
    preconditions:
      - git --version
    status:
      - test ! -d "{{ .GP_TARGET_DIR }}/.git"
    silent: true
    cmds:
      - cmd: >-
          git -C "{{ .GP_TARGET_DIR }}" pull
          --rebase --ff-only
          --strategy-option=theirs
          --no-recurse-submodules --no-commit --no-verify --no-verify-signatures
          --verbose
        ignore_error: true

  ##
  ########################################
  ## Utilities
  ########################################
  ##

  get-file:
    required: [GET_FILE_URI]
    vars:
      GET_FILE_TMP_URI: '{{ .GET_FILE_URI | default "" }}'
      GET_FILE_TMP_TARGET_LOCATION: '{{ coalesce .GET_FILE_TARGET_PATH .GET_FILE_URI | toSlash }}'

      GET_FILE_TMP_FILENAME: '{{ splitList "/" .GET_FILE_TMP_TARGET_LOCATION | last }}'
      GET_FILE_TMP_TARGET_PATH_FALLBACK: '{{ joinPath .DEP_ARCHIVE_DIR .GET_FILE_TMP_FILENAME  }}'

      GET_FILE_TMP_TARGET_PATH: '{{ coalesce .GET_FILE_TARGET_PATH .GET_FILE_TMP_TARGET_PATH_FALLBACK | toSlash }}'
    status:
      - curl --version
      - test -n "{{ .GET_FILE_TMP_URI }}"
      - test -f "{{ .GET_FILE_TMP_TARGET_PATH }}"
      # Here we check each supported format to make sure the file is *not* valid in that format
      # which would mean that the file is there but perhaps got corrupted during download. This
      # will cause it to try downloading again.
      - '! tar -tf "{{ .GET_FILE_TMP_TARGET_PATH }}"'
      - '! unzip -t "{{ .GET_FILE_TMP_TARGET_PATH }}"'
    cmds:
      - task: make-dir
        vars: { MAKE_DIR_TARGET_DIR: '{{ splitList "/" .GET_FILE_TMP_TARGET_PATH | reverse | rest | reverse | join "/" }}' }
      - cmd: |
          curl -L "{{ .GET_FILE_TMP_URI }}" --output "{{ fromSlash .GET_FILE_TMP_TARGET_PATH }}"
      - cmd: echo "Downloaded '{{ .GET_FILE_TMP_URI }}' to '{{ fromSlash .GET_FILE_TMP_TARGET_PATH }}'"

  copy-source-to-target:
    required: [CP_SOURCE_DIR, CP_TARGET_DIR]
    vars:
      CP_OUTPUT_DIR_CMD: cmd.exe /D /C dir /b /a:d "{{ fromSlash .CP_SOURCE_DIR }}"
      CP_OUTPUT_DIR_BASH: ls "{{ toSlash .CP_SOURCE_DIR }}"
      CP_LS_OUTPUT:
        sh: '{{if eq OS "windows"}}{{.CP_OUTPUT_DIR_CMD}}{{else}}{{.CP_OUTPUT_DIR_BASH}}{{end}}'
      CP_OUTPUT_DIR_COMBINED: '{{ .CP_LS_OUTPUT | splitLines | uniq | sortAlpha | first }}'
      CP_SOURCE_DIR: '{{ joinPath .CP_SOURCE_DIR .CP_OUTPUT_DIR_COMBINED }}'
    cmds:
      - task: make-dir
        vars: { MAKE_DIR_TARGET_DIR: '{{ .CP_TARGET_DIR }}' }
      - cmd: |
          xcopy /E /Y /I "{{ fromSlash .CP_SOURCE_DIR }}" "{{ fromSlash .CP_TARGET_DIR }}"
        platforms: [windows]
      - cmd: |
          cp -Ru "{{ toSlash .CP_SOURCE_DIR }}"/* "{{ toSlash .CP_TARGET_DIR }}"
        platforms: [linux, darwin]
      - cmd: |
          echo "Copied {{ shellQuote .CP_SOURCE_DIR }} to {{ shellQuote .CP_TARGET_DIR }}"

  ##
  ########################################
  ## CMake
  ########################################
  ##

  cmake-build:
    vars:
      CM_URI: '{{ default "" .CM_URI }}'
      CM_URI_REPO: '{{ .CM_URI | splitList "/" | last | splitList "." | first }}'

      CM_GIT_ARGS: '{{ default "" .CM_GIT_ARGS }}'
      CM_GIT_BRANCH: '{{ default "" .CM_GIT_BRANCH }}'

      CM_CONFIG: '{{ default "Release" .CM_CONFIG }}'
      CM_CONFIGURE_ARGS: '{{ default "" .CM_CONFIGURE_ARGS }}'

      CM_SOURCE_NAME: '{{ .CM_SOURCE_DIR | default "" | toSlash | splitList "/" | last }}'
      CM_TMP_TARGET_NAME: '{{ coalesce .CM_TARGET_NAME_OVERRIDE .CM_SOURCE_NAME .CM_URI_REPO  }}'
      CM_TMP_TARGET_SOURCE_DIR_FALLBACK: '{{ joinPath .DEP_SOURCE_DIR .CM_TMP_TARGET_NAME }}'

      CM_SOURCE_DIR: '{{ .CM_SOURCE_DIR | default .CM_TMP_TARGET_SOURCE_DIR_FALLBACK }}'
      CM_BUILD_DIR: '{{ joinPath .DEP_BUILD_DIR .CM_TMP_TARGET_NAME }}'

      CM_INSTALL_PREFIX: '{{ joinPath .ILOC .CM_TMP_TARGET_NAME }}'

      CM_TARGET_OUTPUT_TEST_FILE: '{{ .CM_TMP_TARGET_NAME }}.a'
      CM_TARGET_OUTPUT_TEST_PATH: '{{ joinPath .CM_INSTALL_PREFIX "lib" .CM_TARGET_OUTPUT_TEST_FILE }}'

      # https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
      # Semicolon-separated list of directories specifying installation prefixes to be searched by the find_package(),
      # find_program(), find_library(), find_file(), and find_path() commands. Each command will add appropriate
      # subdirectories (like bin, lib, or include) as specified in its own documentation.
      CM_PREFIX_PATH_LIST: |
        {{ .DEP_BUILD_DIR | fromSlash }}
        {{ .DEP_SOURCE_DIR | fromSlash }}
        {{ .ILOC | fromSlash }}
        {{ .TASKFILE_DIR | fromSlash }}
        {{ .CM_BUILD_DIR | fromSlash }}
        {{ .CM_SOURCE_DIR | fromSlash }}
        {{ joinPath .ILOC "leptonica" | fromSlash }}
        {{ joinPath .ILOC "libjpeg-turbo" | fromSlash }}
        {{ joinPath .ILOC "libpng" | fromSlash }}
        {{ joinPath .ILOC "libtiff" | fromSlash }}
        {{ joinPath .ILOC "tesseract" | fromSlash }}
        {{ joinPath .ILOC "zlib-ng" | fromSlash }}
        {{ joinPath .TASKFILE_DIR "external/vcpkg" | fromSlash }}
      CM_PREFIX_PATH: '{{ splitLines .CM_PREFIX_PATH_LIST | uniq | compact | join ";" }}'

      CM_ILOC_INSTALL_PREFIX: '{{ .ILOC }}'
    status:
      - cmake --version
      - test -d "{{ .CM_BUILD_DIR }}"
      - test -d "{{ .CM_SOURCE_DIR }}"
      - test -d "{{ .CM_INSTALL_PREFIX }}"
      - test -f "{{ .CM_TARGET_OUTPUT_TEST_PATH }}"
    dir: '{{ .CM_SOURCE_DIR }}'
    cmds:
      - task: git-clone
        vars:
          GTC_TARGET_DIR: "{{ .CM_SOURCE_DIR }}"
          GTC_URI: "{{ .CM_URI }}"
          GTC_GIT_ARGS: "{{ .CM_GIT_ARGS }}"
          GTC_GIT_BRANCH: "{{ .CM_GIT_BRANCH }}"
      - cmd: >-
          cmake
          -B "{{ fromSlash .CM_BUILD_DIR }}"
          -S "{{ fromSlash .CM_SOURCE_DIR }}"
          -DCMAKE_INSTALL_PREFIX="{{ fromSlash .CM_ILOC_INSTALL_PREFIX }}"
          -DCMAKE_PREFIX_PATH="{{ fromSlash .CM_ILOC_INSTALL_PREFIX }}"
          {{ .CM_CONFIGURE_ARGS }}
      - cmd: >-
          cmake
          --build "{{ fromSlash .CM_BUILD_DIR }}"
          --config "{{ .CM_CONFIG }}"
          --target install
          --verbose
          -j {{ if eq OS "windows" }}$NUMBER_OF_PROCESSORS{{ else }}$(nproc){{ end }}

  cmake-build-archive:
    required: [CMA_URI]
    vars:
      CMA_TMP_FILENAME: '{{ .CMA_URI | splitList "/" | last }}'
      CMA_TMP_ARCHIVE_FILE_PATH: '{{ joinPath .DEP_ARCHIVE_DIR .CMA_TMP_FILENAME }}'

      CMA_TMP_EXTRACTED_SOURCE_DIR: '{{ joinPath .DEP_TEMP_DIR .CMA_TMP_FILENAME }}'

      CMA_TMP_TARGET_NAME: '{{ .CMA_URI | splitList "/" | reverse | rest | first }}'
      CMA_TMP_TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .CMA_TMP_TARGET_NAME }}'
    preconditions:
      - test -n "{{ .CMA_URI }}"
    cmds:
      - cmd: echo "Downloading file from '{{ .CMA_URI }}' and saving to '{{ .CMA_TMP_ARCHIVE_FILE_PATH }}'"
      - task: get-file
        vars:
          GET_FILE_URI: '{{.CMA_URI}}'
          GET_FILE_TARGET_PATH: '{{.CMA_TMP_ARCHIVE_FILE_PATH}}'
      - task: make-dir
        vars: { MAKE_DIR_TARGET_DIR: '{{ .CMA_TMP_EXTRACTED_SOURCE_DIR }}' }
      - cmd: |
          if unzip -t "{{ .CMA_TMP_ARCHIVE_FILE_PATH }}"; then
            echo "Extracting zip file '{{ .CMA_TMP_ARCHIVE_FILE_PATH }}' to '{{ .CMA_TMP_EXTRACTED_SOURCE_DIR }}'"
            unzip -o -qq -d "{{ fromSlash .CMA_TMP_EXTRACTED_SOURCE_DIR }}" "{{ fromSlash .CMA_TMP_ARCHIVE_FILE_PATH }}"
          fi
      - cmd: |
          if tar -tf "{{ .CMA_TMP_ARCHIVE_FILE_PATH }}"; then
            echo "Extracting tar file '{{ .CMA_TMP_ARCHIVE_FILE_PATH }}' to '{{ .CMA_TMP_EXTRACTED_SOURCE_DIR }}'"
            tar -xf "{{ fromSlash .CMA_TMP_ARCHIVE_FILE_PATH }}" -C "{{ fromSlash .CMA_TMP_EXTRACTED_SOURCE_DIR }}"
          fi
      - task: copy-source-to-target
        vars:
          CP_SOURCE_DIR: '{{ .CMA_TMP_EXTRACTED_SOURCE_DIR }}'
          CP_TARGET_DIR: '{{ .CMA_TMP_TARGET_SOURCE_DIR }}'
      - task: cmake-build
        vars:
          CM_SOURCE_DIR: '{{ .CMA_TMP_TARGET_SOURCE_DIR }}'
          CM_CONFIGURE_ARGS: >-
            -DCMA_TMP_TESTS=OFF
            -DCMA_TMP_SHARED=OFF

  ##
  ########################################
  ## Dependencies
  ########################################
  ##

  dependency-nasm:
    platforms: [windows]
    status:
      - nasm --version
    cmds:
      - cmd: scoop install nasm

  dependency-unzip:
    platforms: [windows]
    status:
      - unzip -v
    cmds:
      - cmd: scoop install unzip

  dependency-zlib-ng:
    aliases: [zlib, zlib-ng]
    cmds:
      - task: cmake-build
        vars:
          CM_URI: "https://github.com/zlib-ng/zlib-ng.git"
          CM_CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=OFF
            -DZLIB_COMPAT=ON
            -DZLIB_ENABLE_TESTS=OFF
            -DINSTALL_UTILS=OFF

  dependency-libpng:
    aliases: [libpng, png]
    vars:
      PNG_URI_ZIP: 'https://download.sourceforge.net/libpng/lpng1643.zip'
      PNG_URI_TAR_XZ: 'https://download.sourceforge.net/libpng/libpng-1.6.27.tar.xz'
      PNG_URI: '{{ if eq OS "windows" }}{{ .PNG_URI_ZIP }}{{ else }}{{ .PNG_URI_TAR_XZ }}{{ end }}'
    cmds:
      - task: cmake-build-archive
        vars:
          CMA_URI: '{{ .PNG_URI }}'

  dependency-libjpeg:
    aliases: [libjpeg, jpeg, libjpeg-turbo]
    cmds:
      - task: cmake-build
        vars:
          CM_URI: https://github.com/libjpeg-turbo/libjpeg-turbo.git
          CM_CONFIGURE_ARGS: >-
            -DWITH_TURBOJPEG=OFF
            -DENABLE_SHARED=OFF
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON

  dependency-jbigkit:
    aliases: [jbigkit]
    cmds:
      - task: cmake-build
        vars:
          CM_URI: https://github.com/zdenop/jbigkit.git
          CM_CONFIGURE_ARGS: >-
            -DBUILD_PROGRAMS=OFF
            -DBUILD_TOOLS=OFF
            -DCMAKE_WARN_DEPRECATED=OFF

  dependency-libtiff:
    aliases: [libtiff, tiff]
    cmds:
      - task: cmake-build
        vars:
          CM_URI: https://gitlab.com/libtiff/libtiff.git
          CM_GIT_ARGS: >-
            -c advice.detachedHead=false
          CM_GIT_BRANCH: v4.6.0
          CM_CONFIGURE_ARGS: >-
            -Dtiff-tools=OFF
            -Dtiff-tests=OFF
            -Dtiff-contrib=OFF
            -Dtiff-docs=OFF
            -DWITH_SIMD=ON
            -DENABLE_SHARED=ON

  dependency-leptonica:
    cmds:
      - task: cmake-build
        vars:
          CM_URI: https://github.com/DanBloomberg/leptonica.git
          CM_GIT_BRANCH: 1.84.1
          CM_CONFIGURE_ARGS: >-
            -DSW_BUILD=OFF
            -DBUILD_PROG=OFF
            -DBUILD_SHARED_LIBS=ON
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON

# https://taskfile.dev

version: "3"

vars:
  GIT_VERSION:
    sh: git describe --tags HEAD || true

  VERSION: '{{ .GIT_VERSION | default "0.0.1.unknown" | splitLines | first }}'
  BUILD_OS: '{{if eq OS "windows"}}windows{{else}}{{if eq OS "darwin"}}macos{{else}}linux{{end}}{{end}}'

  BUILD_DIR_NAME: '{{ .BUILD_DIR_NAME | default ".build" }}'
  BUILD_DIR_ROOT: '{{ joinPath .TASKFILE_DIR .BUILD_DIR_NAME }}'
  BUILD_DIR: '{{ joinPath .BUILD_DIR_ROOT .BUILD_OS }}'

  DEP_SOURCE_DIR: '{{ joinPath .BUILD_DIR "source" }}'
  DEP_BUILD_DIR: '{{ joinPath .BUILD_DIR "out" }}'
  DEP_ARCHIVE_DIR: '{{ joinPath .BUILD_DIR "archives" }}'
  DEP_TEMP_DIR: '{{ joinPath .BUILD_DIR "tmp" }}'

  ILOC: '{{ joinPath .BUILD_DIR "install" }}'

  TESSDATA_PREFIX: '{{ .ILOC }}/share/tessdata'

tasks:
  default:
    cmds:
      - cmd: echo "Building Tesseract OCR 'v{{ .VERSION }}'"
      - task: tesseract

  update:
    preconditions:
      - git --version
      - test -d "{{ .TASKFILE_DIR }}/.git"
    cmds:
      - cmd: git -C "{{ .TASKFILE_DIR }}" add .
      - cmd: git -C "{{ .TASKFILE_DIR }}" fetch
      - cmd: git -C "{{ .TASKFILE_DIR }}" pull --rebase --autostash

  #
  # Tesseract
  #

  tesseract:
    deps: [tesseract-build, tesseract-data]
    vars:
      CLI_ARGS: '{{ default "--version" .CLI_ARGS }}'
      TESSERACT_PATH_ARRAY: |
        {{ joinPath .ILOC "tesseract" "bin" }}
        {{ joinPath .ILOC "tesseract" "lib" }}
        {{ joinPath .ILOC "leptonica" "lib" }}
        {{ joinPath .ILOC "libtiff" "lib" }}
      TESSERACT_PATHS: '{{ splitLines .TESSERACT_PATH_ARRAY | uniq | compact | sortAlpha | join ":" }}'
    silent: true
    cmd: |
      export PATH="{{ .TESSERACT_PATHS }}:$PATH"
      export LD_LIBRARY_PATH="{{ .TESSERACT_PATHS }}:$LD_LIBRARY_PATH"
      tesseract {{ .CLI_ARGS }}

  tesseract-data:
    cmds:
      - for: ['eng.traineddata', 'osd.traineddata']
        task: get-file
        vars: { URI: 'https://github.com/tesseract-ocr/tessdata/raw/main/{{ .ITEM }}' }

  tesseract-dependencies:
    internal: true
    deps: [
      dependency-zlib-ng,
      dependency-libpng,
      dependency-libjpeg,
      dependency-jbigkit,
      dependency-leptonica  # Has dependency on 'dependency-libtiff'
    ]

  tesseract-build:
    deps: [init]
    aliases: [build, b]
    cmds:
      - task: tesseract-dependencies
      - task: remove-unused-tool-binaries
      - task: cmake-build
        vars:
          TARGET_NAME: tesseract
          TARGET_SOURCE_DIR: "{{ fromSlash .TASKFILE_DIR }}"
          CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=ON
            -DBUILD_TRAINING_TOOLS=OFF
            -DENABLE_LTO=ON
            -DFAST_FLOAT=ON
            -DGRAPHICS_DISABLED=ON
            -DOPENMP_BUILD=OFF
            -DSW_BUILD=OFF

  #
  # Initialization
  #

  remove-unused-tool-binaries:
    internal: true
    status:
      - test ! -d "{{ .ILOC }}/bin/"
    cmds:
      - cmd: rm -Rf "{{ .ILOC }}/bin/"*.exe

  init:
    # We are intentionally executing these tasks serially to avoid errors that occur
    # when installing multiple packages at the same time.
    cmds:
      - task: git-init
      - task: dependency-nasm
      - task: dependency-unzip
      - task: remove-strawberry-perl

  #
  # Utilities
  #

  make-dir:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      CLI_ARGS: '{{ default "" .CLI_ARGS }}'
      TARGET_DIR_NOT_EMPTY: '{{ coalesce .TARGET_DIR .CLI_ARGS .TASKFILE_DIR }}'
      OUTPUT_TARGET_DIR: '{{ trimAll "''" .TARGET_DIR_NOT_EMPTY }}'
    cmds:
      - cmd: 'cmd.exe /D /E:ON /C if not exist "{{ .OUTPUT_TARGET_DIR }}" mkdir "{{ fromSlash .OUTPUT_TARGET_DIR }}"'
        platforms: [windows]
      - cmd: 'mkdir -p {{ .OUTPUT_TARGET_DIR }}'
        platforms: [darwin, linux]

  test:
    cmds:
      - task: tesseract
        vars: { CLI_ARGS: -v }
      - task: tesseract
        vars: { CLI_ARGS: --list-langs }
      - task: tesseract
        vars: { CLI_ARGS: test/testing/phototest.tif - }

  dependency-nasm:
    platforms: [windows]
    status:
      - nasm --version
    cmds:
      - cmd: scoop install nasm

  dependency-unzip:
    platforms: [windows]
    status:
      - unzip -v
    cmds:
      - cmd: scoop install unzip

  git-init:
    internal: true
    status:
      - test -d "{{ .TASKFILE_DIR }}/test/.gitignore"
    cmds:
      - cmd: git submodule update --recursive --checkout --init

  remove-strawberry-perl:
    platforms: [windows]
    vars:
      INSTALLED_PERL_PACKAGES:
        sh: choco list --yes --fail-on-error-output --by-id-only strawberryperl
      NO_PACKAGES_FOUND: '{{ contains "0 packages installed" .INSTALLED_PERL_PACKAGES }}'
    status:
      - '{{ .NO_PACKAGES_FOUND }}'
      - choco --version
    cmd: >-
      choco uninstall
      --ignoreAutoUninstallerFailure
      --yes
      strawberryperl

  remove-empty-directory:
    vars:
      TARGET_DIR_TO_REMOVE_DEFAULT: '{{ joinPath .DEP_BUILD_DIR "INVALID_BROKEN_PATH" }}'
      TARGET_DIR_TO_REMOVE: '{{ .TARGET_DIR_PATH | default .TARGET_DIR_TO_REMOVE_DEFAULT }}'
    cmds:
      - cmd: cmd.exe /D /C if exist "{{ fromSlash .TARGET_DIR_TO_REMOVE }}" rmdir "{{ fromSlash .TARGET_DIR_TO_REMOVE }}"
        platforms: [windows]
        ignore_error: true
      - cmd: rmdir "{{ toSlash .TARGET_DIR_TO_REMOVE }}"
        platforms: [linux, darwin]
        ignore_error: true

  git-clone:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      URI: '{{ default "" .URI }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
    preconditions:
      - git --version
    status:
      - test -z "{{ .TARGET_DIR }}"
    cmds:
      - task: remove-empty-directory
        vars: { TARGET_DIR_PATH: '{{ .TARGET_DIR }}' }
      - cmd: |
          if [ -n "{{ .URI }}" ] && [ ! -d "{{ toSlash .TARGET_DIR }}" ]; then
            git clone {{ .GIT_ARGS }} --depth 1 "{{ .URI }}" "{{ fromSlash .TARGET_DIR }}"
          else
            echo "Target directory already checked out: '{{ fromSlash .TARGET_DIR }}'"
          fi
      - task: git-pull
        vars: { TARGET_DIR: "{{ .TARGET_DIR }}" }

  git-pull:
    vars:
      INPUT_TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      TARGET_DIR: '{{ coalesce .TARGET_DIR .TASKFILE_DIR }}'
    preconditions:
      - git --version
    status:
      - test ! -d "{{ .TARGET_DIR }}"
      - test ! -d "{{ .TARGET_DIR }}/.git"
    silent: true
    cmds:
      - cmd: >-
          git -C "{{ .TARGET_DIR }}" pull
          --rebase --ff-only
          --strategy-option=theirs
          --no-recurse-submodules --no-commit --no-verify --no-verify-signatures
          --verbose
        ignore_error: true

  clean:
    cmds:
      - cmd: git add .
      - cmd: rm -rf "{{ fromSlash .BUILD_DIR }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "zlib-ng" | fromSlash }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "libjpeg-turbo" | fromSlash }}"
      - cmd: git clean -xfd

  cmake-build:
    vars:
      URI: '{{ default "" .URI }}'
      CONFIG: '{{ default "Release" .CONFIG }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
      CONFIGURE_ARGS: '{{ default "" .CONFIGURE_ARGS }}'

      GIT_REPO: '{{ .URI | splitList "/" | reverse | first }}'
      USERNAME: '{{ .URI | splitList "/" | reverse | rest | first }}'
      REPO: '{{ .GIT_REPO | splitList "." | first }}'

      INPUT_TARGET_SOURCE_DIR: '{{ default .TASKFILE_DIR .TARGET_SOURCE_DIR }}'
      DEFAULT_TARGET_NAME: '{{ .INPUT_TARGET_SOURCE_DIR | toSlash | splitList "/" | last | default .REPO }}'

      TARGET_NAME: '{{ .TARGET_NAME | default .DEFAULT_TARGET_NAME  }}'

      TARGET_SOURCE_DEFAULT_DIR: '{{ joinPath .DEP_SOURCE_DIR .TARGET_NAME }}'

      TARGET_SOURCE_DIR: '{{ .TARGET_SOURCE_DIR | default .TARGET_SOURCE_DEFAULT_DIR }}'
      TARGET_BUILD_DIR: '{{ joinPath .DEP_BUILD_DIR .TARGET_NAME }}'

      # https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html
      # Semicolon-separated list of directories specifying installation prefixes to be searched by the find_package(),
      # find_program(), find_library(), find_file(), and find_path() commands. Each command will add appropriate
      # subdirectories (like bin, lib, or include) as specified in its own documentation.
      TARGET_PREFIX_PATH_LIST: |
        {{ .ILOC }}
        {{ joinPath .ILOC "tesseract" }}
        {{ joinPath .ILOC "leptonica" }}
        {{ joinPath .ILOC "libtiff" }}
        {{ .TASKFILE_DIR }}/external/vcpkg
        {{ .TASKFILE_DIR }}
        {{ .DEP_BUILD_DIR }}
        {{ .DEP_SOURCE_DIR }}
        {{ .TARGET_SOURCE_DIR }}
        {{ .TARGET_BUILD_DIR }}
      TARGET_PREFIX_PATH: '{{ splitLines .TARGET_PREFIX_PATH_LIST | uniq | compact | join ";" }}'

      INSTALL_PREFIX: '{{ joinPath .ILOC .TARGET_NAME }}'

      TARGET_OUTPUT_TEST_FILE: 'lib/{{ .TARGET_NAME }}.a'
      TARGET_OUTPUT_TEST_PATH: '{{ joinPath .INSTALL_PREFIX .TARGET_OUTPUT_TEST_FILE }}'
    status:
      - cmake --version
      - test -d "{{ .TARGET_BUILD_DIR }}"
      - test -d "{{ .TARGET_SOURCE_DIR }}"
      - test -d "{{ .INSTALL_PREFIX }}"
      - test -f "{{ .TARGET_OUTPUT_TEST_PATH }}"
    dir: '{{ .TARGET_SOURCE_DIR }}'
    cmds:
      - cmd: |
          echo "INPUT_TARGET_SOURCE_DIR // {{ .INPUT_TARGET_SOURCE_DIR }}"
          echo "DEFAULT_TARGET_NAME // {{ .DEFAULT_TARGET_NAME }}"
          echo "TARGET_NAME // {{ .TARGET_NAME }}"
          echo "TARGET_SOURCE_DEFAULT_DIR // {{ .TARGET_SOURCE_DEFAULT_DIR }}"
          echo "TARGET_SOURCE_DIR // {{ .TARGET_SOURCE_DIR }}"
          echo "TARGET_BUILD_DIR // {{ .TARGET_BUILD_DIR }}"
          echo "TARGET_PREFIX_PATH // {{ .TARGET_PREFIX_PATH }}"
          echo "INSTALL_PREFIX // {{ .INSTALL_PREFIX }}"
          echo "TARGET_OUTPUT_TEST_FILE // {{ .TARGET_OUTPUT_TEST_FILE }}"
          echo "TARGET_OUTPUT_TEST_PATH // {{ .TARGET_OUTPUT_TEST_PATH }}"
      - task: git-clone
        vars: { TARGET_DIR: "{{ .TARGET_SOURCE_DIR }}", URI: "{{ .URI }}", GIT_ARGS: "{{ .GIT_ARGS }}" }
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TARGET_SOURCE_DIR }}"
          -DCMAKE_PREFIX_PATH="{{ .TARGET_PREFIX_PATH }}"
          -DCMAKE_INSTALL_PREFIX="{{ fromSlash .INSTALL_PREFIX }}"
          -DCMAKE_EXECUTE_PROCESS_COMMAND_ECHO="STDOUT"
          {{ .CONFIGURE_ARGS }}
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install
          --verbose
          -j {{ if eq OS "windows" }}$NUMBER_OF_PROCESSORS{{ else }}$(nproc){{ end }}
          -DCMAKE_PREFIX_PATH="{{ .TARGET_PREFIX_PATH }}"

  dependency-zlib-ng:
    aliases: [zlib, zlib-ng]
    cmds:
      - task: cmake-build
        vars:
          URI: "https://github.com/zlib-ng/zlib-ng.git"
          CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=OFF
            -DZLIB_COMPAT=ON
            -DZLIB_ENABLE_TESTS=OFF
            -DINSTALL_UTILS=OFF

  normalize-file-ending:
    vars:
      TARGET_FILE_PATH: '{{ default "" .TARGET_FILE_PATH }}'
    preconditions:
      - awk --version
    cmds:
      - awk '{ sub("\r$", ""); print }' "{{ fromSlash .TARGET_FILE_PATH }}" > "{{ fromSlash .TARGET_FILE_PATH }}"

  get-file:
    required: [URI]
    vars:
      URI: '{{ default "" .URI }}'
      FILENAME: '{{ .URI | splitList "/" | reverse | first }}'
      TARGET_PATH: '{{ joinPath .DEP_ARCHIVE_DIR .FILENAME }}'
    status:
      - curl --version
      - test -n "{{ .URI }}"
      - test -f "{{ .TARGET_PATH }}"
      - tar -tf "{{ .TARGET_PATH }}" || {{ not (contains ".tar" .FILENAME) }}
      - unzip -t "{{ .TARGET_PATH }}" || {{ not (contains ".zip" .FILENAME) }}
    cmds:
      - cmd: echo "Downloading '{{ .URI }}' to '{{ .TARGET_PATH }}'"
      - task: make-dir
        vars: { TARGET_DIR: '{{ dir .TARGET_PATH }}' }
      - cmd: |
          curl -L "{{ .URI }}" --output "{{ fromSlash .TARGET_PATH }}"

  copy-source-to-target:
    vars:
      CP_SOURCE_DIR: '{{ default .TASKFILE_DIR .CP_SOURCE_DIR }}'
      CP_TARGET_DIR: '{{ default .TASKFILE_DIR .CP_TARGET_DIR }}'
      OUTPUT_DIR_CMD: cmd.exe /D /C dir /b /a:d "{{ fromSlash .CP_SOURCE_DIR }}"
      OUTPUT_DIR_BASH: ls "{{ toSlash .CP_SOURCE_DIR }}"
      LS: '{{if eq OS "windows"}}{{.OUTPUT_DIR_CMD}}{{else}}{{.OUTPUT_DIR_BASH}}{{end}}'
      LS_OUTPUT:
        sh: '{{ .LS }}'
      OUTPUT_DIR_COMBINED: '{{ .LS_OUTPUT | splitLines | uniq | sortAlpha | first }}'
      SOURCE_DIR: '{{ joinPath .CP_SOURCE_DIR .OUTPUT_DIR_COMBINED }}'
    cmds:
      - task: make-dir
        vars: { TARGET_DIR: '{{ .CP_TARGET_DIR }}' }
      - cmd: |
          xcopy /E /Y /I "{{ fromSlash .SOURCE_DIR }}" "{{ fromSlash .CP_TARGET_DIR }}"
        platforms: [windows]
      - cmd: |
          cp -Ru "{{ .SOURCE_DIR }}"/* "{{ .CP_TARGET_DIR }}"
        platforms: [linux, darwin]
      - cmd: |
          echo "Copied {{ shellQuote .SOURCE_DIR }} to {{ shellQuote .CP_TARGET_DIR }}"

  dependency-libpng:
    aliases: [libpng, png]
    vars:
      PNG_URI_ZIP: 'https://download.sourceforge.net/libpng/lpng1643.zip'
      PNG_URI_TAR_XZ: 'https://download.sourceforge.net/libpng/libpng-1.6.27.tar.xz'
      PNG_URI: '{{ if eq OS "windows" }}{{ .PNG_URI_ZIP }}{{ else }}{{ .PNG_URI_TAR_XZ }}{{ end }}'
      PNG_TARGET_NAME: '{{ .PNG_URI | splitList "/" | reverse | rest | first }}'  # libpng
      PNG_TMP_FILENAME: '{{ .PNG_URI | splitList "/" | last }}'  # lpng1643.zip
      PNG_TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .PNG_TARGET_NAME }}'
      OUTPUT_UNZIP_DIR: '{{ joinPath .DEP_TEMP_DIR .PNG_TARGET_NAME | fromSlash }}'
      TARGET_EXTENSION: '{{ .PNG_TMP_FILENAME | splitList "." | last }}'
      TARGET_SOURCE_DIR: '{{ .PNG_TARGET_SOURCE_DIR }}'
      OUTPUT_ARCHIVE_FILE_PATH: '{{ joinPath .DEP_ARCHIVE_DIR .PNG_TMP_FILENAME }}'
      OUTPUT_ARCHIVE_DIR: '{{ .DEP_ARCHIVE_DIR }}'
    silent: true
    cmds:
      - task: get-file
        vars: { URI: '{{.PNG_URI}}' }
      - task: make-dir
        vars: { TARGET_DIR: '{{ .OUTPUT_UNZIP_DIR }}' }
      - cmd: |
          if [ "{{ .TARGET_EXTENSION }}" == "zip" ]; then
            unzip -o -qq -d "{{ fromSlash .OUTPUT_UNZIP_DIR }}" "{{ fromSlash .OUTPUT_ARCHIVE_FILE_PATH }}"
          else
            tar -xf "{{ fromSlash .OUTPUT_ARCHIVE_FILE_PATH }}" -C "{{ fromSlash .OUTPUT_UNZIP_DIR }}"
          fi
      - task: copy-source-to-target
        vars:
          CP_SOURCE_DIR: '{{ .OUTPUT_UNZIP_DIR }}'
          CP_TARGET_DIR: '{{ .TARGET_SOURCE_DIR }}'
      - task: cmake-build
        vars:
          TARGET_NAME: '{{ .TARGET_NAME }}'
          TARGET_SOURCE_DIR: '{{ .TARGET_SOURCE_DIR }}'
          CONFIGURE_ARGS: >-
            -DPNG_TESTS=OFF
            -DPNG_SHARED=OFF


  dependency-libjpeg:
    aliases: [libjpeg, jpeg]
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/libjpeg-turbo/libjpeg-turbo.git
          CONFIGURE_ARGS: >-
            -DWITH_TURBOJPEG=OFF
            -DENABLE_SHARED=OFF

  dependency-jbigkit:
    aliases: [jbigkit]
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/zdenop/jbigkit.git
          CONFIGURE_ARGS: >-
            -DBUILD_PROGRAMS=OFF
            -DBUILD_TOOLS=OFF
            -DCMAKE_WARN_DEPRECATED=OFF

  dependency-libtiff:
    aliases: [libtiff, tiff]
    cmds:
      - task: cmake-build
        vars:
          URI: https://gitlab.com/libtiff/libtiff.git
          GIT_ARGS: -c advice.detachedHead=false -b "v4.6.0"
          CONFIGURE_ARGS: >-
            -Dtiff-tools=OFF
            -Dtiff-tests=OFF
            -Dtiff-contrib=OFF
            -Dtiff-docs=OFF

  dependency-leptonica:
    deps: [dependency-libtiff]
    cmds:
      - task: cmake-build
        vars:
          URI: https://github.com/DanBloomberg/leptonica.git
          CONFIGURE_ARGS: >-
            -DSW_BUILD=OFF
            -DBUILD_PROG=OFF
            -DBUILD_SHARED_LIBS=ON

# https://taskfile.dev

version: "3"

vars:
  BUILD_DIR_BASE: '{{ joinPath .TASKFILE_DIR ".build" }}'
  BUILD_OS: '{{if eq .OS "windows"}}windows{{else}}{{if eq .OS "darwin"}}darwin{{else}}linux{{end}}{{end}}'
  BUILD_DIR: '{{ joinPath .BUILD_DIR_BASE .BUILD_OS }}'
  DEP_SOURCE_DIR: '{{ joinPath .BUILD_DIR "source" }}'
  DEP_BUILD_DIR: '{{ joinPath .BUILD_DIR "out" }}'
  DEP_ARCHIVE_DIR: '{{ joinPath .BUILD_DIR "archives" }}'
  ILOC: '{{ joinPath .BUILD_DIR "install" }}'
  PREFIX_PATH: '{{ .ILOC }}'
  VERSION:
    sh: git describe --tags HEAD || echo "0.0.1.unknown"
  TESSDATA_PREFIX: '{{ .ILOC }}/share/tessdata'
  TESSERACT_BIN_DIR: '{{ .ILOC }}/tesseract/bin'

tasks:
  default:
    cmds:
      - task: build

  init:
    internal: true
    deps: [git-init, dependency-nasm, remove-strawberry-perl]
    cmds:
      - task: build-dependencies

  build-dependencies:
    internal: true
    deps: [
      dependency-zlib-ng, dependency-libpng,
      dependency-libjpeg, dependency-jbigkit,
      dependency-libtiff, dependency-leptonica
    ]

  remove-unused-tool-binaries:
    cmds:
      - cmd: rm -Rf "{{ .ILOC }}/bin/"*.exe

  build:
    deps: [init]
    cmds:
      - task: remove-unused-tool-binaries
      - task: build-tesseract

  build-tesseract:
    internal: true
    vars:
      TARGET_NAME: tesseract
      CONFIG: '{{ default "Release" .CONFIG }}'
      TARGET_BUILD_DIR: '{{ joinPath .BUILD_DIR .TARGET_NAME }}'
    cmds:
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TASKFILE_DIR }}"
          -DCMAKE_BUILD_TYPE="{{ .CONFIG }}"
          -DCMAKE_PREFIX_PATH="{{ .PREFIX_PATH }}"
          -DCMAKE_INSTALL_PREFIX="{{ .INSTALL_PREFIX }}"
          -DBUILD_SHARED_LIBS=ON
          -DBUILD_TRAINING_TOOLS=OFF
          -DENABLE_LTO=ON
          -DFAST_FLOAT=ON
          -DGRAPHICS_DISABLED=ON
          -DOPENMP_BUILD=OFF
          -DSW_BUILD=OFF
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install
      - task: get-tesseract-data

  get-tesseract-info:
    vars:
      URI: '{{ default "" .URI }}'
      TARGET_DIR: '{{ default .TASKFILE_DIR .TARGET_DIR }}'
      TARGET_NAME: '{{ .URI | splitList "/" | last }}'
      TARGET: '{{ joinPath .TARGET_DIR .TARGET_NAME }}'
    desc: "Download training data. {{ .TARGET_NAME }}"
    status:
      - test -f "{{ .TARGET }}"
    cmds:
      - cmd: |
          mkdir -p "{{ .TARGET | dir | fromSlash }}"
      - cmd: |
          curl -L "{{ .URI }}" --output "{{ .TARGET | fromSlash }}"

  get-tesseract-data:
    cmds:
      - for: ['eng.traineddata', 'osd.traineddata']
        task: get-tesseract-info
        vars:
          TARGET_DIR: '{{ .TESSDATA_PREFIX }}'
          URI: 'https://github.com/tesseract-ocr/tessdata/raw/main/{{ .ITEM }}'

  test:
    deps: [get-tesseract-data, tesseract]
    env:
      TESSDATA_PREFIX: '{{ .TESSDATA_PREFIX }}'
      PATH: '{{ .TESSERACT_BIN_DIR }}:{{ .PATH1 }}'
    cmds:
      - cmd: tesseract -v
      - cmd: tesseract --list-langs
      - cmd: tesseract test/testing/phototest.tif -

  dependency-nasm:
    platforms: [windows]
    status:
      - nasm --version
    cmds:
      - cmd: scoop install nasm
        platforms: [windows]

  git-init:
    internal: true
    status:
      - test -d "{{ .TASKFILE_DIR }}/test/.gitignore"
    cmds:
      - cmd: git submodule update --recursive --checkout --init

  remove-strawberry-perl:
    platforms: [windows]
    status:
      - choco --version
      - choco list --local-only | grep -q strawberryperl
    cmds:
      - cmd: choco uninstall strawberryperl
        ignore_error: true

  git-clone:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
      URI: '{{ default "" .URI }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
    preconditions:
      - git --version
    status:
      - test -z "{{ .URI }}" || test -d "{{ .TARGET_DIR }}"
    cmds:
      - cmd: |
          if [ -n "{{ .URI }}" ]; then
            git clone {{ .GIT_ARGS }} --depth 1 "{{ .URI }}" "{{ fromSlash .TARGET_DIR }}"
          else
            echo "Skipped empty clone."
          fi
        silent: true

  git-pull:
    vars:
      TARGET_DIR: '{{ default "" .TARGET_DIR }}'
    preconditions:
      - git --version
    status:
      - test -d "{{ .TARGET_DIR }}"
    cmds:
      - cmd: |
          git -C "{{ fromSlash .TARGET_DIR }}" pull --rebase --recurse-submodules --autostash

  cmake-build:
    vars:
      URI: '{{ default "" .URI }}'
      CONFIG: '{{ default "Release" .CONFIG }}'
      GIT_ARGS: '{{ default "" .GIT_ARGS }}'
      CONFIGURE_ARGS: '{{ default "" .CONFIGURE_ARGS }}'

      GIT_REPO: '{{ .URI | splitList "/" | reverse | first }}'
      USERNAME: '{{ .URI | splitList "/" | reverse | rest | first }}'
      REPO: '{{ .GIT_REPO | splitList "." | first }}'

      DEFAULT_TARGET_NAME: '{{ .REPO }}'

      TARGET_NAME: '{{ default .DEFAULT_TARGET_NAME .TARGET_NAME }}'

      TARGET_SOURCE_DEFAULT_DIR: '{{ joinPath .DEP_SOURCE_DIR .TARGET_NAME }}'

      TARGET_SOURCE_DIR: '{{ default .TARGET_SOURCE_DEFAULT_DIR .TARGET_SOURCE_DIR }}'
      TARGET_BUILD_DIR: '{{ joinPath .DEP_BUILD_DIR .TARGET_NAME }}'

      INSTALL_PREFIX: '{{ joinPath .ILOC .TARGET_NAME }}'
    status:
      - test -d "{{ .TARGET_BUILD_DIR }}"
      - test -d "{{ .TARGET_SOURCE_DIR }}"
    cmds:
      - task: git-clone
        vars: { TARGET_DIR: "{{ .TARGET_SOURCE_DIR }}", URI: "{{ .URI }}", GIT_ARGS: "{{ .GIT_ARGS }}" }
      - cmd: >-
          cmake
          -B "{{ fromSlash .TARGET_BUILD_DIR }}"
          -S "{{ fromSlash .TARGET_SOURCE_DIR }}"
          -DCMAKE_PREFIX_PATH="{{ fromSlash .PREFIX_PATH }}"
          -DCMAKE_INSTALL_PREFIX="{{ fromSlash .INSTALL_PREFIX }}"
          {{ .CONFIGURE_ARGS }}
      - cmd: >-
          cmake
          --build "{{ fromSlash .TARGET_BUILD_DIR }}"
          --config "{{ .CONFIG }}"
          --target install

  dependency-zlib-ng:
    cmds:
      - task: cmake-build
        vars:
          URI: "https://github.com/zlib-ng/zlib-ng.git"
          CONFIGURE_ARGS: >
            -DBUILD_SHARED_LIBS=OFF
            -DZLIB_COMPAT=ON
            -DZLIB_ENABLE_TESTS=OFF
            -DINSTALL_UTILS=OFF

  clean:
    cmds:
      - cmd: git add .
      - cmd: git clean -xfd
      - cmd: rm -rf "{{ fromSlash .BUILD_DIR_BASE }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "zlib-ng" | fromSlash }}"
      - cmd: rm -rf "{{ joinPath .TASKFILE_DIR "libjpeg-turbo" | fromSlash }}"

  dependency-libpng:
    vars:
      URI: 'https://download.sourceforge.net/libpng/lpng1643.zip'
      TARGET_NAME: '{{ .URI | splitList "/" | reverse | rest | first }}'  # libpng
      FILENAME: '{{ .URI | splitList "/" | last }}'  # lpng1643.zip
      TARGET_SUB_DIRECTORY: '{{ .FILENAME | splitList "." | first }}'
      OUTPUT_ARCHIVE_FILE_PATH: '{{ joinPath .DEP_ARCHIVE_DIR .FILENAME }}'
      TARGET_SOURCE_DIR_TMP: '{{ joinPath .DEP_SOURCE_DIR .TARGET_SUB_DIRECTORY }}'
      TARGET_SOURCE_DIR: '{{ joinPath .DEP_SOURCE_DIR .TARGET_NAME }}'
    status:
      - test -d "{{ .TARGET_SOURCE_DIR }}"
      - test -f "{{ .OUTPUT_ARCHIVE_FILE_PATH }}"
    cmds:
      - cmd: |
          mkdir -p \
            "{{ .OUTPUT_ARCHIVE_FILE_PATH | dir | fromSlash }}" \
            "{{ fromSlash .TARGET_SOURCE_DIR_TMP }}" \
            "{{ fromSlash .TARGET_SOURCE_DIR }}"
          curl -sSL -o "{{ fromSlash .OUTPUT_ARCHIVE_FILE_PATH }}" "{{ .URI }}"
          unzip -o -qq -d "{{ fromSlash .TARGET_SOURCE_DIR_TMP }}" "{{ fromSlash .OUTPUT_ARCHIVE_FILE_PATH }}"
          cp -rf "{{ joinPath .TARGET_SOURCE_DIR_TMP .TARGET_SUB_DIRECTORY }}"/* "{{ fromSlash .TARGET_SOURCE_DIR }}"
      - task: cmake-build
        vars:
          TARGET_SOURCE_DIR: '{{ .TARGET_SOURCE_DIR }}'
          CONFIGURE_ARGS: >-
            -DPNG_TESTS=OFF
            -DPNG_SHARED=OFF

  dependency-libjpeg:
    cmds:
      - task: cmake-build
        vars:
          TARGET_NAME: libjpeg-turbo
          URI: https://github.com/libjpeg-turbo/libjpeg-turbo.git
          CONFIGURE_ARGS: >-
            -DWITH_TURBOJPEG=OFF
            -DENABLE_SHARED=OFF

  dependency-jbigkit:
    cmds:
      - task: cmake-build
        vars:
          TARGET_NAME: jbigkit
          URI: https://github.com/zdenop/jbigkit.git
          CONFIGURE_ARGS: >-
            -DBUILD_PROGRAMS=OFF
            -DBUILD_TOOLS=OFF
            -DCMAKE_WARN_DEPRECATED=OFF

  dependency-libtiff:
    cmds:
      - task: cmake-build
        vars:
          TARGET_NAME: libtiff
          URI: https://gitlab.com/libtiff/libtiff.git
          GIT_ARGS: -c advice.detachedHead=false -b "v4.6.0"
          CONFIGURE_ARGS: >-
            -Dtiff-tools=OFF
            -Dtiff-tests=OFF
            -Dtiff-contrib=OFF
            -Dtiff-docs=OFF

  dependency-leptonica:
    cmds:
      - task: cmake-build
        vars:
          TARGET_NAME: leptonica
          URI: https://github.com/DanBloomberg/leptonica.git
          CONFIGURE_ARGS: >-
            -DSW_BUILD=OFF
            -DBUILD_PROG=OFF
            -DBUILD_SHARED_LIBS=ON

